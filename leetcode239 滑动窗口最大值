给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。
返回滑动窗口中的最大值。-->返回的是每个滑动窗口中的最大值组成的数组

示例：
输入：nums = [1,3,-1,-3,5,3,6,7], k = 3
输出：[3,3,5,5,6,7]  

解释：
滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
 
 代码示意：
 一、暴力法：时间复杂度O（n^2) 空间复杂度O（n）
 var maxSlidingWindow = function(nums, k) {
    if(nums.length<2 || k===1) return nums;
    let ans =[];
    for(let i=0;i<nums.length-k+1;i++){
        let max = nums[i];
        for(let j=i;j<i+k;j++){
            max = Math.max(max,nums[j]);
        }
        ans.push(max);
    }
    return ans;
};
二、双端队列
解题思路： 使用一个双端队列存储窗口中值的 索引 ，并且保证双端队列中第一个元素永远是最大值，那么只需要遍历一次 nums，就可以取到每次移动时的最大值。-->注意 deque存放的是索引！！有助于出队
时间复杂度O（n） 空间复杂度O（n）
var maxSlidingWindow = function(nums, k) {
    if(nums.length<2 || k===1) return nums;
    let deque = [],ans=[];
    for(let i=0;i<nums.length;i++){
        // 把滑动窗口之外的踢出 放在前面比放在后面效率高
        if(deque[0]<i-k+1){
            deque.shift();
        }
        while(nums[i]>=nums[deque[deque.length-1]]){
            deque.pop();
        }
        deque.push(i);
        if(i>=k-1){ //从第k-1开始 就开始找最大值
            ans.push(nums[deque[0]]);
        }
    }
    return ans;
};

 

